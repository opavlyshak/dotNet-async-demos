<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignalR</name>
    </assembly>
    <members>
        <member name="T:SignalR.IConfigurationManager">
            <summary>
            Provides access to server configuration.
            </summary>
        </member>
        <member name="P:SignalR.IConfigurationManager.ConnectionTimeout">
            <summary>
            Gets of sets a <see cref="T:System.TimeSpan"/> representing the amount of time to leave a connection open before timing out.
            </summary>
        </member>
        <member name="P:SignalR.IConfigurationManager.DisconnectTimeout">
            <summary>
            Gets of sets a <see cref="T:System.TimeSpan"/> representing the amount of time to wait after a connection goes away before raising the disconnect event.
            </summary>
        </member>
        <member name="P:SignalR.IConfigurationManager.HeartBeatInterval">
            <summary>
            Gets of sets a <see cref="T:System.TimeSpan"/> representing the interval for checking the state of a connection. 
            </summary>
        </member>
        <member name="P:SignalR.IConfigurationManager.KeepAlive">
            <summary>
            Gets of sets a <see cref="T:System.TimeSpan"/> representing the amount of time to wait before sending a keep alive packet over an idle connection. Set to null to disable keep alive.
            </summary>
        </member>
        <member name="T:SignalR.IConnectionManager">
            <summary>
            Provides access to hubs and persistent connections references.
            </summary>
        </member>
        <member name="M:SignalR.IConnectionManager.GetHubContext``1">
            <summary>
            Returns a <see cref="T:SignalR.Hubs.IHubContext"/> for the specified <see cref="T:SignalR.Hubs.IHub"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:SignalR.Hubs.IHub"/></typeparam>
            <returns>a <see cref="T:SignalR.Hubs.IHubContext"/> for the specified <see cref="T:SignalR.Hubs.IHub"/></returns>
        </member>
        <member name="M:SignalR.IConnectionManager.GetHubContext(System.String)">
            <summary>
            Returns a <see cref="T:SignalR.Hubs.IHubContext"/>for the specified hub.
            </summary>
            <param name="hubName">Name of the hub</param>
            <returns>a <see cref="T:SignalR.Hubs.IHubContext"/> for the specified hub</returns>
        </member>
        <member name="M:SignalR.IConnectionManager.GetConnectionContext``1">
            <summary>
            Returns a <see cref="T:SignalR.IPersistentConnectionContext"/> for the <see cref="T:SignalR.PersistentConnection"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:SignalR.PersistentConnection"/></typeparam>
            <returns>A <see cref="T:SignalR.IPersistentConnectionContext"/> for the <see cref="T:SignalR.PersistentConnection"/>.</returns>
        </member>
        <member name="F:SignalR.Hosting.HostConstants.DebugMode">
            <summary>
            The host should set this if they need to enable debug mode
            </summary>
        </member>
        <member name="F:SignalR.Hosting.HostConstants.SupportsWebSockets">
            <summary>
            The host should set this is web sockets can be supported
            </summary>
        </member>
        <member name="F:SignalR.Hosting.HostConstants.WebSocketServerUrl">
            <summary>
            The host should set this if the web socket url is different
            </summary>
        </member>
        <member name="T:SignalR.Hubs.IHubContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:SignalR.Hubs.IHubContext.Clients">
            <summary>
            Gets a dynamic object that represents all clients connected to the hub.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.IHubContext.Groups">
            <summary>
            Gets the <see cref="T:SignalR.IGroupManager"/> the hub.
            </summary>
        </member>
        <member name="T:SignalR.Hubs.IParameterResolver">
            <summary>
            Describes a parameter resolver for resolving parameter-matching values based on provided information.
            </summary>
        </member>
        <member name="M:SignalR.Hubs.IParameterResolver.ResolveMethodParameters(SignalR.Hubs.MethodDescriptor,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Resolves method parameter values based on provided objects.
            </summary>
            <param name="method">Method descriptor.</param>
            <param name="values">List of values to resolve parameter values from.</param>
            <returns>Array of parameter values.</returns>
        </member>
        <member name="M:SignalR.Hubs.DefaultParameterResolver.ResolveParameter(SignalR.Hubs.ParameterDescriptor,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Resolves a parameter value based on the provided object.
            </summary>
            <param name="descriptor">Parameter descriptor.</param>
            <param name="value">Value to resolve the parameter value from.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:SignalR.Hubs.DefaultParameterResolver.ResolveMethodParameters(SignalR.Hubs.MethodDescriptor,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Resolves method parameter values based on provided objects.
            </summary>
            <param name="method">Method descriptor.</param>
            <param name="values">List of values to resolve parameter values from.</param>
            <returns>Array of parameter values.</returns>
        </member>
        <member name="T:SignalR.Hubs.ParameterDescriptor">
            <summary>
            Holds information about a single hub method parameter.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.ParameterDescriptor.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.ParameterDescriptor.Type">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="T:SignalR.Hubs.IMethodDescriptorProvider">
            <summary>
            Describes a hub method provider that builds a collection of available methods on a given hub.
            </summary>
        </member>
        <member name="M:SignalR.Hubs.IMethodDescriptorProvider.GetMethods(SignalR.Hubs.HubDescriptor)">
            <summary>
            Retrieve all methods on a given hub.
            </summary>
            <param name="hub">Hub descriptor object.</param>
            <returns>Available methods.</returns>
        </member>
        <member name="M:SignalR.Hubs.IMethodDescriptorProvider.TryGetMethod(SignalR.Hubs.HubDescriptor,System.String,SignalR.Hubs.MethodDescriptor@,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Tries to retrieve a method.
            </summary>
            <param name="hub">Hub descriptor object</param>
            <param name="method">Name of the method.</param>
            <param name="descriptor">Descriptor of the method, if found. Null otherwise.</param>
            <param name="parameters">Method parameters to match.</param>
            <returns>True, if a method has been found.</returns>
        </member>
        <member name="M:SignalR.Hubs.ReflectedMethodDescriptorProvider.FetchMethodsFor(SignalR.Hubs.HubDescriptor)">
            <summary>
            Retrieves an existing dictionary of all available methods for a given hub from cache.
            If cache entry does not exist - it is created automatically by BuildMethodCacheFor.
            </summary>
            <param name="hub"></param>
            <returns></returns>
        </member>
        <member name="M:SignalR.Hubs.ReflectedMethodDescriptorProvider.BuildMethodCacheFor(SignalR.Hubs.HubDescriptor)">
            <summary>
            Builds a dictionary of all possible methods on a given hub.
            Single entry contains a collection of available overloads for a given method name (key).
            This dictionary is being cached afterwards.
            </summary>
            <param name="hub">Hub to build cache for</param>
            <returns>Dictionary of available methods</returns>
        </member>
        <member name="T:SignalR.Hubs.HubDescriptor">
            <summary>
            Holds information about a single hub.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.HubDescriptor.Name">
            <summary>
            Hub name.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.HubDescriptor.Type">
            <summary>
            Hub type.
            </summary>
        </member>
        <member name="T:SignalR.Hubs.IHubManager">
            <summary>
            Describes a hub manager - main point in the whole hub and method lookup process.
            </summary>
        </member>
        <member name="M:SignalR.Hubs.IHubManager.GetHub(System.String)">
            <summary>
            Retrieves a single hub descriptor.
            </summary>
            <param name="hubName">Name of the hub.</param>
            <returns>Hub descriptor, if found. Null, otherwise.</returns>
        </member>
        <member name="M:SignalR.Hubs.IHubManager.GetHubs(System.Func{SignalR.Hubs.HubDescriptor,System.Boolean})">
            <summary>
            Retrieves all available hubs.
            </summary>
            <returns>List of hub descriptors.</returns>
        </member>
        <member name="M:SignalR.Hubs.IHubManager.ResolveHub(System.String)">
            <summary>
            Resolves a given hub name to a concrete object.
            </summary>
            <param name="hubName">Name of the hub.</param>
            <returns>Hub implementation instance, if found. Null otherwise.</returns>
        </member>
        <member name="M:SignalR.Hubs.IHubManager.ResolveHubs">
            <summary>
            Resolves all available hubs to their concrete objects.
            </summary>
            <returns>List of hub instances.</returns>
        </member>
        <member name="M:SignalR.Hubs.IHubManager.GetHubMethod(System.String,System.String,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Retrieves a method with a given name on a given hub.
            </summary>
            <param name="hubName">Name of the hub.</param>
            <param name="method">Name of the method to find.</param>
            <param name="parameters">Method parameters to match.</param>
            <returns>Descriptor of the method, if found. Null otherwise.</returns>
        </member>
        <member name="M:SignalR.Hubs.IHubManager.GetHubMethods(System.String,System.Func{SignalR.Hubs.MethodDescriptor,System.Boolean})">
            <summary>
            Gets all methods available to call on a given hub.
            </summary>
            <param name="hubName">Name of the hub,</param>
            <param name="predicate">Optional predicate for filtering results.</param>
            <returns>List of available methods.</returns>
        </member>
        <member name="T:SignalR.IPersistentConnectionContext">
            <summary>
            Provides access to information about a persistent connection
            </summary>
        </member>
        <member name="P:SignalR.IPersistentConnectionContext.Connection">
            <summary>
            Gets the <see cref="T:SignalR.IConnection"/> for the <see cref="T:SignalR.PersistentConnection"/>
            </summary>
        </member>
        <member name="P:SignalR.IPersistentConnectionContext.Groups">
            <summary>
            Gets the <see cref="T:SignalR.IGroupManager"/> for the <see cref="T:SignalR.PersistentConnection"/>
            </summary>
        </member>
        <member name="T:SignalR.WrappedValue">
            <summary>
            All values saved to the messages store are wrapped by this type.
            If a store needs to save values in a serializable way then it just needs to call
            ToString() and we'll unwrap it when it comes back (if needed).
            </summary>
        </member>
        <member name="T:SignalR.IConnectionIdGenerator">
            <summary>
            Used to generate connection ids.
            </summary>
        </member>
        <member name="M:SignalR.IConnectionIdGenerator.GenerateConnectionId(SignalR.Hosting.IRequest,System.Security.Principal.IPrincipal)">
            <summary>
            Creates a connection id for the current request.
            </summary>
            <param name="request">The request</param>
            <param name="user">The current principal</param>
            <returns>A connection id</returns>
        </member>
        <member name="T:SignalR.Hubs.MethodDescriptor">
            <summary>
            Holds information about a single hub method.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.MethodDescriptor.Name">
            <summary>
            Name of this method.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.MethodDescriptor.ReturnType">
            <summary>
            The return type of this method.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.MethodDescriptor.Hub">
            <summary>
            Hub descriptor object, target to his method.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.MethodDescriptor.Parameters">
            <summary>
            Available method parameters.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.MethodDescriptor.Invoker">
            <summary>
            Method invocation delegate.
            Takes a target hub and an array of invocation arguments as it's arguments.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.IHub.Caller">
            <summary>
            Gets a dynamic object that represents the calling client.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.IHub.Context">
            <summary>
            Gets a <see cref="T:SignalR.Hubs.HubCallerContext"/>. Which contains information about the calling client.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.IHub.Clients">
            <summary>
            Gets a dynamic object that represents all clients connected to this hub (not hub instance).
            </summary>
        </member>
        <member name="P:SignalR.Hubs.IHub.Groups">
            <summary>
            Gets the <see cref="T:SignalR.IGroupManager"/> the hub instance.
            </summary>
        </member>
        <member name="M:SignalR.Hosting.RequestExtensions.QueryStringOrForm(SignalR.Hosting.IRequest,System.String)">
            <summary>
            Gets a value from the QueryString, and if it's null or empty, gets it from the Form instead.
            </summary>
        </member>
        <member name="T:SignalR.IGroupManager">
            <summary>
            Manages groups for a connection.
            </summary>
        </member>
        <member name="M:SignalR.IGroupManager.Send(System.String,System.Object)">
            <summary>
            Sends a value to the specified group.
            </summary>
            <param name="groupName">The name of the group.</param>
            <param name="value">The value to send.</param>
            <returns>A task that represents when send is complete.</returns>
        </member>
        <member name="M:SignalR.IGroupManager.Add(System.String,System.String)">
            <summary>
            Adds a connection to the specified group. 
            </summary>
            <param name="connectionId">The connection id to add to the group.</param>
            <param name="groupName">The name of the group</param>
            <returns>A task that represents the connection id being added to the group.</returns>
        </member>
        <member name="M:SignalR.IGroupManager.Remove(System.String,System.String)">
            <summary>
            Removes a connection from the specified group.
            </summary>
            <param name="connectionId">The connection id to remove from the group.</param>
            <param name="groupName">The name of the group</param>
            <returns>A task that represents the connection id being removed from the group.</returns>
        </member>
        <member name="T:SignalR.Hubs.IHubDescriptorProvider">
            <summary>
            Describes hub descriptor provider, which provides information about available hubs.
            </summary>
        </member>
        <member name="M:SignalR.Hubs.IHubDescriptorProvider.GetHubs">
            <summary>
            Retrieve all avaiable hubs.
            </summary>
            <returns>Collection of hub descriptors.</returns>
        </member>
        <member name="M:SignalR.Hubs.IHubDescriptorProvider.TryGetHub(System.String,SignalR.Hubs.HubDescriptor@)">
            <summary>
            Tries to retrieve hub with a given name.
            </summary>
            <param name="hubName">Name of the hub.</param>
            <param name="descriptor">Retrieved descriptor object.</param>
            <returns>True, if hub has been found</returns>
        </member>
        <member name="P:SignalR.Hubs.Hub.Clients">
            <summary>
            A dynamic object that represents all clients connected to this hub (not hub instance).
            </summary>
        </member>
        <member name="P:SignalR.Hubs.Hub.Caller">
            <summary>
            A dynamic object that represents the calling client.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.Hub.Context">
            <summary>
            Provides information about the calling client.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.Hub.Groups">
            <summary>
            The group manager for this hub instance.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.HubCallerContext.ConnectionId">
            <summary>
            Gets the connection id of the calling client.
            </summary>
        </member>
        <member name="P:SignalR.Hubs.HubCallerContext.RequestCookies">
            <summary>
            Gets the cookies for the request
            </summary>
        </member>
        <member name="P:SignalR.Hubs.HubCallerContext.Headers">
            <summary>
            Gets the headers for the request
            </summary>
        </member>
        <member name="P:SignalR.Hubs.HubCallerContext.QueryString">
            <summary>
            Gets the querystring for the request
            </summary>
        </member>
        <member name="T:SignalR.PersistentConnection">
            <summary>
            Represents a connection between client and server.
            </summary>
        </member>
        <member name="M:SignalR.PersistentConnection.Send(System.Object)">
            <summary>
            Sends a message to the incoming connection id associated with the <see cref="T:SignalR.PersistentConnection"/>.
            </summary>
            <param name="value">The value to send</param>
            <returns>A task that represents when the send is complete.</returns>
        </member>
        <member name="P:SignalR.PersistentConnection.Connection">
            <summary>
            Gets the <see cref="T:SignalR.IConnection"/> for the <see cref="T:SignalR.PersistentConnection"/>.
            </summary>
        </member>
        <member name="P:SignalR.PersistentConnection.Groups">
            <summary>
            Gets the <see cref="T:SignalR.IGroupManager"/> for the <see cref="T:SignalR.PersistentConnection"/>.
            </summary>
        </member>
        <member name="T:SignalR.Infrastructure.ServerCommandHandler">
            <summary>
            Provides a way for SignalR servers to communicate with each other
            </summary>
        </member>
        <member name="T:SignalR.Transports.ConnectionReference">
            <summary>
            Represents a connection where we only have the id
            </summary>
        </member>
        <member name="P:SignalR.Transports.LongPollingTransport.LongPollDelay">
            <summary>
            The number of milliseconds to tell the browser to wait before restablishing a
            long poll connection after data is sent from the server. Defaults to 0.
            </summary>
        </member>
        <member name="M:SignalR.TaskAsyncHelper.Interleave``1(System.Func{``0,System.Action,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},``0)">
            <summary>
            Passes a task returning function into another task returning function so that
            it can decide when it starts and returns a task that completes when all are finished
            </summary>
        </member>
        <member name="T:SignalR.IConnection">
            <summary>
            A communication channel for a <see cref="T:SignalR.PersistentConnection"/> and its connections.
            </summary>
        </member>
        <member name="M:SignalR.IConnection.Send(System.String,System.Object)">
            <summary>
            Sends a message to all connections waiting for the specified signal. An example of signal may be a
            specific connection id, or fully qualified group name (Use <see cref="T:SignalR.IGroupManager"/> to manipulate groups).
            </summary>
            <param name="signal">The signal to broacast to</param>
            <param name="value">The value to broadcast.</param>
            <returns>A task that represents when the broadcast is complete.</returns>        
        </member>
        <member name="M:SignalR.IConnection.Broadcast(System.Object)">
            <summary>
            Broadcasts a value to all connections.
            </summary>
            <param name="value">The value to broadcast.</param>
            <returns>A task that represents when the broadcast is complete.</returns>
        </member>
    </members>
</doc>
